<?php

/**
 * @file
 * Adds additional elements on block administration forms to add ARIA landmark roles.
 */

/**
 * Implements hook_form_alter().
 *
 * Adds additional elements to the 'add block' and 'configure block' forms.
 */
function block_aria_landmark_roles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'block_add_block_form' || $form_id == 'block_admin_configure') {
    // Build the block object.
    $block = new stdClass;
    $block->module = $form['module']['#value'];
    $block->delta = $form['delta']['#value'];
    
    // Create the additional form elements.
    $form['block_aria_role'] = array(
      '#title' => t('Block ARIA Landmark Role settings'),
      '#description' => t('Add an ARIA landmark role to this block.'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#weight' => 0,
    );
    $form['block_aria_role']['aria_role'] = array(
      '#title' => t('ARIA Landmark Role'),
      '#type' => 'textfield',
      '#default_value' => block_aria_landmark_roles_get_role($block),
    );
    
    // Add extra validation and submission functions.
    $form['#validate'][] = 'block_aria_landmark_roles_form_validate';
    $form['#submit'][] = 'block_aria_landmark_roles_form_submit';
  }
}

/**
 * Form validation handler for the ARIA landmark role.
 *
 * Ensures that a valid landmark role has been specified.
 */
function block_aria_landmark_roles_form_validate($form, &$form_state) {
  if (isset($form_state['values']['aria_role'])) {
    // Valid ARIA landmark roles.
    $valid_roles = array('banner', 'navigation', 'search', 'main', 'complementary', 'contentinfo');
    
    // If the submitted value is not valid, display an error message.
    if (!in_array($form_state['values']['aria_role'], $valid_roles)) {
      form_set_error('aria_role', t('%role is not a valid ARIA landmark role.', array(
        '%role' => $form_state['values']['aria_role'],
      )));
    }
  }
}

/**
 * Form submission handler for the ARIA landmark role.
 *
 * Saves the data to the block_aria_landmark_roles table.
 */
function block_aria_landmark_roles_form_submit($form, &$form_state) {
  if (isset($form_state['values']['aria_role']) && user_access('administer blocks')) {
    $module = $form_state['values']['module'];
    $delta = $form_state['values']['delta'];
    $role = $form_state['values']['aria_role'];

    // Delete any existing role.
    db_delete('block_aria_landmark_roles')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    
    // Save the new role.
    if (!empty($form_state['values']['aria_role'])) {
      db_insert('block_aria_landmark_roles')
        ->fields(array('module' => $module, 'delta' => $delta, 'aria_role' => $role))
        ->execute();
    }
  }
}

/**
 * Find an ARIA landmark role for a certain block.
 *
 * @param obj $block
 *  An object containing the name of the module and the delta of the block.
 *
 * @return string|bool
 *  Returns the role if one was found. If not, returns nothing.
 */
function block_aria_landmark_roles_get_role($block) {
  $role = db_query('SELECT aria_role FROM {block_aria_landmark_roles} WHERE module = :module AND delta = :delta', array(
    ':module' => $block->module,
    ':delta' => $block->delta,
  ))->fetchField();
  
  return $role ? $role : '';
}

/**
 * Implements hook_preprocess() for blocks.
 *
 * Adds additional variables for ARIA landmark roles.
 */
function block_aria_landmark_roles_preprocess_block(&$variables) {
  $block = $variables['block'];
  $role = block_aria_landmark_roles_get_role($block);
  
  if (!empty($role)) {
    // Add the role into the attributes array.
    $variables['attributes_array']['role'] = $role;
    
    // Create a new separate variable.
    $variables['aria_role'] = 'role="' . $role . '"';
  }
  else {
    // Create an empty ARIA role variable as a fallback.
    $variables['aria_role'] = NULL;
  }
}